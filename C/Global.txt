C语言中的__FILE__用以指示本行语句所在源文件的文件名，举例如下（test.c）：
#include <stdio.h>
int main()
{
printf("%s\n",__FILE__);
}
在gcc编译生成a.out，执行后输出结果为：
test.c
在windows的vc6.0下编译执行结果为：
c:\documents and settings\administrator\桌面\test.c
 
 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
 
C语言中的__LINE__用以指示本行语句在源文件中的位置信息，举例如下：

 
1 #include <stdio.h>
 
2 main()
3 {
4 printf("%d\n",__LINE__);
5 printf("%d\n",__LINE__);
6 printf("%d\n",__LINE__);
7 };
该程序在linux用gcc编译，在windows的vc6.0下编译都可以通过，执行结果都为：
4
5
6
 
还可以通过语句#line来重新设定__LINE__的值，举例如下：
#include <stdio.h>
 
#line 200  //指定下一行的__LINE__为200
main()
{
printf("%d\n",__LINE__);
printf("%d\n",__LINE__);
printf("%d\n",__LINE__);
};
编译执行后输出结果为：
202
203
204
 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
另外gcc还支持__func__,它指示所在的函数，但是这个关键字不被windows下的vc6.0支持，举例如下：
#include <stdio.h>
void main()
{
printf("this is print by function %s\n",__func__);
}
其编译后输出结果为
this is print by function main
 
注意 “#line”、 “__LINE__”、 “__FILE__" 及 “__func__" 都是大小写敏感的

-------------------------------------------------------------------------------------------------------------------------------------
(当前编译日期〔注意和当前系统日期区别开来〕:__DATE__==%s\n", __DATE__);
("当前编译时间〔注意和当前系统日期区别开来〕:__TIME__==%s\n", __TIME__);
("当前系统时间戳：__TIMESTAMP__==%s\n", __TIMESTAMP__);
("当要求程序严格遵循ANSIC标准时该标识符被赋值为1:__STDC__==%d\n", __STDC__);
("当用C++编译程序编译时，标识符__cplusplus就会被定义:__cplusplus==%d\n", __cplusplus);

